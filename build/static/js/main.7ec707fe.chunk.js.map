{"version":3,"sources":["hooks/useInputState.js","components/EditTodoForm.js","hooks/useToggle.js","components/Todo.js","components/TodoList.js","components/TodoForm.js","components/TodoApp.js","App.js","reportWebVitals.js","index.js"],"names":["useInputState","initialValue","useState","value","setValue","e","target","EditTodoForm","updateTodo","id","task","toggleEditForm","editValue","handleChange","reset","onSubmit","preventDefault","noValidate","autoComplete","variant","color","onChange","label","className","type","useToggle","state","setState","toggle","Todo","deleteTodo","isEditing","onClick","TodoList","todos","map","todo","TodoForm","addNewTodo","TodoApp","Local_key","completed","setTodos","useCallback","todoId","newTask","filter","useEffect","data","JSON","parse","localStorage","getItem","setItem","stringify","uuid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ec707fe.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useInputState = (initialValue) => {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const reset = () => {\r\n        setValue('');\r\n    };\r\n\r\n    return [value, handleChange,reset];\r\n};\r\n\r\nexport default useInputState;","import React from \"react\";\r\nimport useInputState from \"../hooks/useInputState\";\r\n\r\nconst EditTodoForm = ({ updateTodo, id, task, toggleEditForm }) => {\r\n  const [editValue, handleChange, reset] = useInputState(task);\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          updateTodo(id, editValue);\r\n          reset();\r\n          toggleEditForm();\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n      >\r\n        <input\r\n          variant=\"filled\"\r\n          color=\"primary\"\r\n          value={editValue}\r\n          onChange={handleChange}\r\n          id=\"standard-basic\"\r\n          label=\"Todo\"\r\n        />\r\n        <button className=\"rounded bg-purple-500\" type=\"submit\">\r\n          Save\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTodoForm;\r\n","// useToggle.js\r\nimport { useState } from 'react';\r\n\r\nconst useToggle = (initialValue = false) => {\r\n    const [state, setState] = useState(initialValue);\r\n\r\n    const toggle = () => {\r\n        setState(!state);\r\n    };\r\n\r\n    return [state, toggle];\r\n};\r\n\r\nexport default useToggle;","import React from \"react\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport useToggle from \"../hooks/useToggle\";\r\n\r\nconst Todo = ({ id, task, updateTodo, deleteTodo }) => {\r\n  const [isEditing, toggle] = useToggle();\r\n  // console.log(isEditing)\r\n  // console.log(toggle)\r\n  // console.log(deleteTodo)\r\n  return (\r\n    <div className=\"flex space-y-4\">\r\n      <ul>\r\n        {isEditing ? (\r\n          <EditTodoForm\r\n            updateTodo={updateTodo}\r\n            id={id}\r\n            task={task}\r\n            toggleEditForm={toggle}\r\n          />\r\n        ) : (\r\n          <div className=\"text-gray-600 font-bold\">{task}</div>\r\n        )}\r\n        <div className=\"flex w-full\">\r\n          <div className=\"w-1/2\">\r\n            <button\r\n              onClick={() => toggle()}\r\n              className=\"rounded bg-purple-500 px-4\"\r\n            >\r\n              Edit\r\n            </button>\r\n          </div>\r\n          <div className=\"w-1/2\">\r\n            <button\r\n              className=\"rounded bg-red-500 px-4\"\r\n              onClick={() => deleteTodo(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","// TodoList.js\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, updateTodo, deleteTodo }) => {\r\n  return (\r\n    <div>\r\n      {todos?.map((todo) => (\r\n        <Todo\r\n          key={todo.id}\r\n          id={todo.id}\r\n          task={todo.task}\r\n          updateTodo={updateTodo}\r\n          deleteTodo={deleteTodo}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport useInputState from \"../hooks/useInputState\";\r\n\r\nconst TodoForm = ({ addNewTodo }) => {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addNewTodo(value);\r\n          reset();\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n      >\r\n        <div className=\"flex justify-between\">\r\n          <div className=\"w-1/2\">xs=8</div>\r\n          <div className=\"w-1/2\">xs=4</div>\r\n        </div>\r\n        <input\r\n          className=\"form-input px-4 py-3 rounded bg-gray-700\"\r\n          value={value}\r\n          onChange={handleChange}\r\n          id=\"standard-basic\"\r\n          label=\"Todo\"\r\n        />\r\n        <button className=\"bg-blue-500 rounded pl-2 px-4\">ADD</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst TodoApp = () => {\r\n  const initialTodos = [\r\n    { id: 1, task: \"Learn Next\", completed: false },\r\n    { id: 2, task: \"Learn React Hooks\", completed: true },\r\n    { id: 3, task: \"Learn ES6\", completed: false },\r\n  ];\r\n  const Local_key = \"_todo_\";\r\n  const [todos, setTodos] = useState(initialTodos);\r\n\r\n  const addNewTodo = (newTask) => {\r\n    setTodos([...todos, { id: uuid(), task: newTask, completed: false }]);\r\n  };\r\n\r\n  const updateTodo = useCallback((todoId, newTask) => {\r\n    setTodos((todos) =>\r\n      todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, task: newTask } : todo\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const deleteTodo = useCallback((todoId) => {\r\n    setTodos((todos) => todos.filter((todo) => todo.id !== todoId));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(Local_key));\r\n    setTodos(data);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(Local_key, JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"text-3xl font-bold underline text-gray-600\">\r\n        Todo List\r\n      </div>\r\n      <TodoForm addNewTodo={addNewTodo} />\r\n      <TodoList todos={todos} updateTodo={updateTodo} deleteTodo={deleteTodo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoApp;\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"./styles/output.css\";\nimport TodoApp from \"./components/TodoApp\";\n\nconst App = () => {\n  return (\n    <div className=\"flex justify-center\">\n      <header>\n        <TodoApp />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}